{"version":3,"sources":["layouts/BasicLayout.js","layouts/LoginLayout.js","Main.js","Helper/NetworkDetector.js","serviceWorker.js","index.js"],"names":["Home","lazy","Stuff","Contact","BasicLayout","Component","logoutHandler","e","history","this","props","push","render","className","exact","to","onClick","fallback","path","component","withRouter","LoginLayout","type","id","placeholder","required","autoFocus","htmlFor","Main","NetworkDetector","ComposedComponent","state","isDisconnected","handleConnectionChange","navigator","onLine","setState","webPing","setInterval","fetch","mode","then","clearInterval","catch","componentDidMount","window","addEventListener","componentWillUnmount","removeEventListener","isLocalhost","Boolean","location","hostname","match","registerValidSW","swUrl","config","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","console","log","onUpdate","onSuccess","error","ReactDOM","document","getElementById","URL","process","href","origin","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.4da7b3f8.chunk.js","sourcesContent":["import React, { Component,Suspense,lazy } from \"react\";\nimport { BrowserRouter, Route, Switch, Link, withRouter } from \"react-router-dom\";\nimport \"./../css/style.css\";\n\nconst Home =  lazy(() => import('./../View/Home'));\nconst Stuff   = lazy(() => import('./../View/Stuff'));\nconst Contact =  lazy(() => import('./../View/Contact'));\n\nclass BasicLayout extends Component {\n  logoutHandler = (e) => {\n    const { history } = this.props;\n    if (history) history.push('/login');\n  }\n\n  render() {\n    return (\n      <BrowserRouter>\n        <div>\n          <h1>Simple SPA</h1>\n          <ul className=\"header\">\n            <li ><Link exact=\"true\" to=\"/\">Home</Link></li>\n            <li><Link to=\"/stuff\">Stuff</Link></li>\n            <li><Link to=\"/contact\">Contact</Link></li>\n            <li><Link onClick={e => this.logoutHandler(e)} to=\"/login\">Login</Link></li>\n          </ul>\n          <div className=\"content\">\n            <Switch>\n              <Suspense fallback={<div>Loading...</div>}>\n                <Route exact path=\"/\" component={Home} />\n                <Route path=\"/stuff\" component={Stuff} />\n                <Route path=\"/contact\" component={Contact} />\n              </Suspense>\n            </Switch>\n\n          </div>\n        </div>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default withRouter(BasicLayout);","import React, { Component } from \"react\";\nimport { Link } from \"react-router-dom\";\nimport 'bootstrap/dist/css/bootstrap.css';\nimport \"./../css/login.css\";\nclass LoginLayout extends Component {\n    render() {\n\n        return (\n            <div className=\"container\">\n       \t\t\t<div className=\"row\">\n\t\t          <div className=\"col-sm-9 col-md-7 col-lg-5 mx-auto\">\n\t\t            <div className=\"card card-signin my-5\">\n\t\t              <div className=\"card-body\">\n\t\t                <h5 className=\"card-title text-center\">Sign In || \n\t\t                <Link to=\"/\" > Home</Link></h5>\n\t\t                <form className=\"form-signin\">\n\t\t                  <div className=\"form-label-group\">\n\t\t                    <input type=\"email\" id=\"inputEmail\" className=\"form-control\" placeholder=\"Email address\" required autoFocus />\n\t\t                    <label htmlFor=\"inputEmail\">Email address</label>\n\t\t                  </div>\n\t\t                  <div className=\"form-label-group\">\n\t\t                    <input type=\"password\" id=\"inputPassword\" className=\"form-control\" placeholder=\"Password\" required />\n\t\t                    <label htmlFor=\"inputPassword\">Password</label>\n\t\t                  </div>\n\t\t                  <div className=\"custom-control custom-checkbox mb-3\">\n\t\t                    <input type=\"checkbox\" className=\"custom-control-input\" id=\"customCheck1\" />\n\t\t                    <label className=\"custom-control-label\" htmlFor=\"customCheck1\">Remember password</label>\n\t\t                  </div>\n\t\t                  <button className=\"btn btn-lg btn-primary btn-block text-uppercase\" type=\"submit\">Sign in</button>\n\t\t                  <hr className=\"my-4\" />\n\t\t                  <button className=\"btn btn-lg btn-google btn-block text-uppercase\" type=\"submit\"><i className=\"fab fa-google mr-2\" /> Sign in with Google</button>\n\t\t                  <button className=\"btn btn-lg btn-facebook btn-block text-uppercase\" type=\"submit\"><i className=\"fab fa-facebook-f mr-2\" /> Sign in with Facebook</button>\n\t\t                </form>\n\t\t              </div>\n\t\t            </div>\n\t\t          </div>\n\t\t        </div>\n      \t\t</div>\n\n        );\n    }\n}\n\nexport default LoginLayout;","import React, { Component } from \"react\";\nimport { BrowserRouter, Switch } from \"react-router-dom\";\nimport BasicLayout from \"./layouts/BasicLayout\";\nimport LoginLayout from \"./layouts/LoginLayout\";\nimport NetworkDetector from \"./Helper/NetworkDetector\";\n\nclass Main extends Component {\n  render() {\n    return (\n      <BrowserRouter>\n        <Switch>\n            <LoginLayout path='/login' component={LoginLayout} />\n            <BasicLayout path=\"/\" component={BasicLayout} />  \n        </Switch>\n      </BrowserRouter>\n    );\n  }\n}\n\nexport default NetworkDetector(Main);","import React, { Component } from 'react';\n\nexport default function (ComposedComponent) {\n    class NetworkDetector extends Component {\n        state = {\n            isDisconnected: false\n        }\n\n        componentDidMount() {\n            this.handleConnectionChange();\n            window.addEventListener('online', this.handleConnectionChange);\n            window.addEventListener('offline', this.handleConnectionChange);\n        }\n\n        componentWillUnmount() {\n            window.removeEventListener('online', this.handleConnectionChange);\n            window.removeEventListener('offline', this.handleConnectionChange);\n        }\n\n\n        handleConnectionChange = () => {\n            const condition = navigator.onLine ? 'online' : 'offline';\n            if (condition === 'online') {\n                const webPing = setInterval(\n                    () => {\n                        fetch('//google.com', {\n                            mode: 'no-cors',\n                        })\n                            .then(() => {\n                                this.setState({ isDisconnected: false }, () => {\n                                    return clearInterval(webPing)\n                                });\n                            }).catch(() => this.setState({ isDisconnected: true }))\n                    }, 2000);\n                return;\n            }\n\n            return this.setState({ isDisconnected: true });\n        }\n\n        render() {\n            const { isDisconnected } = this.state;\n            return (\n                <div>\n\n                    <ComposedComponent {...this.props} />\n                    {isDisconnected && (<div className=\"internet-error\">\n                        <div className=\"content\">\n                            <p className=\"alert alert-success\">Internet connection lost</p>\n                        </div>\n                    </div>)\n                    }\n                </div>\n            );\n        }\n    }\n\n    return NetworkDetector;\n}","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Main from \"./Main\";\nimport * as serviceWorker from './serviceWorker';\n\n\nReactDOM.render(\n  <Main/>, \n  document.getElementById(\"root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}